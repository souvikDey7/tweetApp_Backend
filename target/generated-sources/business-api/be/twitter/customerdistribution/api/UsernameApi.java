/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.twitter.customerdistribution.api;

import be.twitter.customerdistribution.types.Post;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-25T17:08:44.791029500+05:30[Asia/Calcutta]")

@Validated
@Api(value = "{username}", description = "the {username} API")
public interface UsernameApi {

    /**
     * PUT /{username}/like/{id}
     * Like tweet
     *
     * @param username user id (required)
     * @param id tweet post id (required)
     * @param flag to check like add or remove (required)
     * @param tokenKey  (optional)
     * @return success (status code 200)
     *         or internal server error (status code 500)
     *         or error details (status code 400)
     */
    @ApiOperation(value = "", nickname = "addLike", notes = "Like tweet", response = Integer.class, tags={ "interaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Integer.class),
        @ApiResponse(code = 500, message = "internal server error"),
        @ApiResponse(code = 400, message = "error details", response = String.class) })
    @RequestMapping(value = "/{username}/like/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Integer> addLike(@ApiParam(value = "user id",required=true) @PathVariable("username") String username,@ApiParam(value = "tweet post id",required=true) @PathVariable("id") String id,@NotNull @ApiParam(value = "to check like add or remove", required = true) @Valid @RequestParam(value = "flag", required = true) Boolean flag,@ApiParam(value = "" ) @RequestHeader(value="Token-key", required=false) String tokenKey);


    /**
     * POST /{username}/add
     * Post new tweet
     *
     * @param username user id (required)
     * @param tokenKey  (optional)
     * @param post  (optional)
     * @return success (status code 200)
     *         or internal server error (status code 500)
     *         or error details (status code 400)
     */
    @ApiOperation(value = "", nickname = "addPost", notes = "Post new tweet", response = String.class, tags={ "upsert tweet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = String.class),
        @ApiResponse(code = 500, message = "internal server error"),
        @ApiResponse(code = 400, message = "error details", response = String.class) })
    @RequestMapping(value = "/{username}/add",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> addPost(@ApiParam(value = "user id",required=true) @PathVariable("username") String username,@ApiParam(value = "" ) @RequestHeader(value="Token-key", required=false) String tokenKey,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Post post);


    /**
     * DELETE /{username}/delete/{id}
     * Delete tweet
     *
     * @param username user id (required)
     * @param id tweet post id (required)
     * @param tokenKey  (optional)
     * @return success (status code 200)
     *         or internal server error (status code 500)
     *         or error details (status code 400)
     */
    @ApiOperation(value = "", nickname = "deletePost", notes = "Delete tweet", response = String.class, tags={ "upsert tweet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = String.class),
        @ApiResponse(code = 500, message = "internal server error"),
        @ApiResponse(code = 400, message = "error details", response = String.class) })
    @RequestMapping(value = "/{username}/delete/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<String> deletePost(@ApiParam(value = "user id",required=true) @PathVariable("username") String username,@ApiParam(value = "tweet post id",required=true) @PathVariable("id") String id,@ApiParam(value = "" ) @RequestHeader(value="Token-key", required=false) String tokenKey);


    /**
     * POST /{username}/update/{id}
     * Update tweet
     *
     * @param username user id (required)
     * @param id tweet post id (required)
     * @param tokenKey  (optional)
     * @param post  (optional)
     * @return success (status code 200)
     *         or internal server error (status code 500)
     *         or error details (status code 400)
     */
    @ApiOperation(value = "", nickname = "editPost", notes = "Update tweet", response = String.class, tags={ "upsert tweet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = String.class),
        @ApiResponse(code = 500, message = "internal server error"),
        @ApiResponse(code = 400, message = "error details", response = String.class) })
    @RequestMapping(value = "/{username}/update/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> editPost(@ApiParam(value = "user id",required=true) @PathVariable("username") String username,@ApiParam(value = "tweet post id",required=true) @PathVariable("id") String id,@ApiParam(value = "" ) @RequestHeader(value="Token-key", required=false) String tokenKey,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Post post);


    /**
     * GET /{username}/forgot
     * Forgot password
     *
     * @param username  (required)
     * @return success (status code 200)
     *         or internal server error (status code 500)
     *         or error details (status code 400)
     */
    @ApiOperation(value = "", nickname = "resetPassword", notes = "Forgot password", response = String.class, tags={ "Registration and Login", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = String.class),
        @ApiResponse(code = 500, message = "internal server error"),
        @ApiResponse(code = 400, message = "error details", response = String.class) })
    @RequestMapping(value = "/{username}/forgot",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> resetPassword(@ApiParam(value = "",required=true) @PathVariable("username") String username);


    /**
     * POST /{username}/reply/{id}
     * Reply to tweet
     *
     * @param username user id (required)
     * @param id tweet post id (required)
     * @param tokenKey  (optional)
     * @param post  (optional)
     * @return success (status code 200)
     *         or internal server error (status code 500)
     *         or error details (status code 400)
     */
    @ApiOperation(value = "", nickname = "setReply", notes = "Reply to tweet", response = String.class, tags={ "interaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = String.class),
        @ApiResponse(code = 500, message = "internal server error"),
        @ApiResponse(code = 400, message = "error details", response = String.class) })
    @RequestMapping(value = "/{username}/reply/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> setReply(@ApiParam(value = "user id",required=true) @PathVariable("username") String username,@ApiParam(value = "tweet post id",required=true) @PathVariable("id") String id,@ApiParam(value = "" ) @RequestHeader(value="Token-key", required=false) String tokenKey,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Post post);

}
