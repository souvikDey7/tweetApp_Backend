/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.twitter.customerdistribution.api;

import be.twitter.customerdistribution.types.PostDetails;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-25T17:08:44.791029500+05:30[Asia/Calcutta]")

@Validated
@Api(value = "usernames", description = "the usernames API")
public interface UsernamesApi {

    /**
     * GET /usernames
     * get all tweet  of the users
     *
     * @param userid  (required)
     * @param tokenKey  (optional)
     * @param page no of content to show (optional)
     * @return all tweet of owner (status code 200)
     *         or internal server error (status code 500)
     *         or error details (status code 400)
     */
    @ApiOperation(value = "", nickname = "getAllTweetByAUserName", notes = "get all tweet  of the users", response = PostDetails.class, responseContainer = "List", tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "all tweet of owner", response = PostDetails.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "internal server error"),
        @ApiResponse(code = 400, message = "error details", response = String.class) })
    @RequestMapping(value = "/usernames",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PostDetails>> getAllTweetByAUserName(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "userid", required = true) String userid,@ApiParam(value = "" ) @RequestHeader(value="Token-key", required=false) String tokenKey,@ApiParam(value = "no of content to show" ) @RequestHeader(value="page", required=false) Integer page);

}
